-- [VII] DDL, DCL, DML
-- SQL = DDL(테이블 생성, 테이블 삭제, 테이블 구조 변경, 테이블 모든 데이터 제거, 테이블명변경) +
--       DML(SELECT, INSERT, UPDATE, DELETE) +
--       DCL(사용자계정생성, 사용자에게권한부여, 권한박탈, 사용자계정삭제, 트랜잭션명령어)
-- ★ ★ ★ DDL ★ ★ ★ --
-- 1. 테이블 생성(CREATE TABLE 테이블명 ....) : 테이블 구조를 정의
DROP TABLE BOOK; -- 테이블 삭제
CREATE TABLE BOOK(
    BOOKID    NUMBER(4), -- BOOKID필드의 타입은 숫자 4자리.
    BOOKNAME  VARCHAR2(20), -- BOOKNAME필드의 타입은 문자 20byte
    PUBLISHER VARCHAR2(30), -- PUBLISHER필드의 타입은 문자 30byte
    RDATE     DATE,         -- RDATE필드의 타입은 DATE
    PRICE     NUMBER(8,2),  -- PRICE필드의 타입은 숫자 전체 8자리 중 소수점 2자리
    PRIMARY KEY(BOOKID) -- 제약조건 : BOOKID필드가 주키(PRIMARY KEY:NOT NULL, UNIQUE)
);
SELECT * FROM BOOK;
DESC BOOK;

DROP TABLE BOOK; -- 테이블 삭제
CREATE TABLE BOOK(
    BOOKID    NUMBER(4) PRIMARY KEY, 
    BOOKNAME  VARCHAR2(20),
    PUBLISHER VARCHAR2(30), 
    RDATE     DATE,         
    PRICE     NUMBER(8,2) 
);
SELECT * FROM BOOK;

    -- DEPT01테이블 : DEPTNO(숫자2:PK), DNAME(문자14), LOC(문자13)
CREATE TABLE DEPT01 (
    DEPTNO NUMBER(2), 
    DNAME VARCHAR2(14),
    LOC VARCHAR2(13),
    PRIMARY KEY(DEPTNO)
);
-- EX. EMP와 유사한 EMP01테이블 : EMPNO(숫자4-PK), ENAME(문자10),SAL(숫자7,2), 
                -- DEPTNO(숫자2, DEPT01테이블의 DEPTNO와 연동:외래키 FK)
CREATE TABLE EMP01(
    EMPNO NUMBER(4) PRIMARY KEY,
    ENAME VARCHAR2(10),
    SAL   NUMBER(7,2),
    DEPTNO NUMBER(2) REFERENCES DEPT01(DEPTNO) -- FK
);
SELECT * FROM EMP01;
-- 외래키로 연결할 경우 : 참조테이블(DEPT01)에 데이터를 먼저 INSERT
INSERT INTO DEPT01 VALUES (10,'신림','IT');
INSERT INTO EMP01 VALUES (1000,'홍',9000,10);
DROP TABLE DEPT01; -- 참조하는 테이블이 있을 경우 테이블 삭제 안 됨
COMMIT; -- DML 명령어들을 데이터베이스에 적용

-- 서브쿼리를 이용한 테이블 생성
CREATE TABLE EMP02
    AS
    SELECT * FROM EMP; -- 서브쿼리결과로 EMP02테이블 생성(제약조건 미포함)
SELECT * FROM EMP02;
DESC EMP;
DESC EMP02;

CREATE TABLE EMP03 -- emp의 특정 필드
    AS 
    SELECT EMPNO, ENAME, DEPTNO FROM EMP;
SELECT * FROM EMP03;

CREATE TABLE EMP04 -- EMP의 특정 행(서브쿼리의 WHERE 절로 제한)
    AS
    SELECT * FROM EMP WHERE DEPTNO=10;
SELECT * FROM EMP04;
CREATE TABLE EMP05 -- EMP 구조만 추출(데이터는 추출하지 않고 구조만)
    AS
    SELECT * FROM EMP WHERE 0=1;
SELECT * FROM EMP05;

-- 2. 테이블 구조 변경(ALTER TABLE 테이블명 ADD || MODIFY || DROP COLUMN)
-- (1) 필드 추가(ADD)
SELECT * FROM EMP03; -- EMPNO(수4), ENAME(문10), DEPTNO(수2)
ALTER TABLE EMP03 ADD (JOB VARCHAR2(20), SAL NUMBER(7,2));
SELECT * FROM EMP03;-- 추가된 필드의 데이터는 NULL로
ALTER TABLE EMP03 ADD COMM NUMBER(7,2);
-- (2) 필드 수정(MODIFY)
ALTER TABLE EMP03 MODIFY EMPNO VARCHAR2(4); -- 숫자데이터가 들어있으면 숫자로만 변경
ALTER TABLE EMP03 MODIFY EMPNO NUMBER(5);
ALTER TABLE EMP03 MODIFY EMPNO NUMBER(4);--숫자는 줄이는게 불가
ALTER TABLE EMP03 MODIFY ENAME VARCHAR2(100);
ALTER TABLE EMP03 MODIFY ENAME VARCHAR2(10);--문자데이터필드는 늘이거나 줄이는 거 가능
SELECT MAX(LENGTH(ENAME)) FROM EMP; -- ENAME글자수 최대값
ALTER TABLE EMP03 MODIFY ENAME VARCHAR2(6); -- 가능
ALTER TABLE EMP03 MODIFY ENAME VARCHAR2(5); -- 불가능(데이터보다 작은 자리수)
ALTER TABLE EMP03 MODIFY (SAL VARCHAR2(10), COMM NUMBER(3)); -- NULL필드는 마음대로 수정
-- (3) 필드 삭제 (DROP COLUMN)
ALTER TABLE EMP03 DROP COLUMN JOB;
SELECT * FROM EMP03;
ALTER TABLE EMP03 DROP COLUMN SAL;
ALTER TABLE EMP03 DROP COLUMN ENAME; -- 데이터까지 삭제(취소 불가)
SELECT * FROM EMP03;

-- 3. 테이블 삭제(DROP TABLE 테이블명)
DROP TABLE EMP03;
SELECT * FROM EMP03;
DROP TABLE DEPT01; 
-- EMP01테이블에서 DEPT테이블을 참조할 경우 EMP01을 삭제한 후 DEPT01 테이블 삭제 가능
DROP TABLE EMP01;
DROP TABLE DEPT01;

-- 4. 테이블 모든 데이터 제거(TRUNCATE TABLE 테이블명)
SELECT * FROM EMP02;
TRUNCATE TABLE EMP02; -- ROLLBACK 불가
SELECT * FROM EMP02;

-- 5. 테이블명 변경(RENAME 원테이블명 TO 바꿀테이블명)
RENAME EMP02 TO EMP2;
SELECT * FROM EMP02;
SELECT * FROM EMP2;

-- 6. 데이터 딕셔너리(DB자원을 효율적으로 관리하기 위한 시스템 테이블:접근불가)
--    VS.   데이터 딕셔너리뷰(접근가능한 읽기전용 가상의 테이블)
-- 데이터 딕셔너리 뷰의 종류
  -- (1) USER_xxx : 현계정이 소유하고 있는 객체(테이블, 제약조건, 뷰, 인덱스)
        -- USER_TABLES, USER_CONSTRAINTS, USER_VIEWS, USER_INDEXES
        SELECT * FROM USER_TABLES;
        SELECT * FROM USER_CONSTRAINTS;
        SELECT * FROM USER_VIEWS;
        SELECT * FROM USER_INDEXES;
  -- (2) ALL_xxx : 현 계정에서 접근 가능한 객체(테이블, 제약조건, 뷰, 인덱스)
        -- ALL_TABLES, ALL_CONSTRAINTS, ALL_VIEWS, ALL_INDEXES
        SELECT * FROM ALL_TABLES;
  -- (3) DBA_XXX : DBA권한에서만 접근 가능한 객체
        -- DBA_TABLES, DBA_CONSTRAINTS, DBA_VIEWS, DBA_INDEXES
        SELECT * FROM DBA_TABLES;
        SELECT * FROM DBA_VIEWS;

-- ★ ★ ★ DML ★ ★ ★ --
-- 1. INSERT INTO 테이블명 VALUES (값1, 값2, ...); 모든 필드 데이터 입력
  --  INSERT INTO 테이블명 (필드명1, 필드명2, ..) VALUES (값1, 값2, ..); 언급된 필드외는 NULL로 입력
SELECT * FROM DEPT01;
INSERT INTO DEPT01 VALUES (50, 'ACCOUNTING', 'NEW YORK');
INSERT INTO DEPT01 VALUES (60, 'SALES', NULL); -- 명시적 NULL 데이터 추가
INSERT INTO DEPT01 (DEPTNO, DNAME, LOC) VALUES (70, 'RESEARCH', '신림');
INSERT INTO DEPT01 (LOC, DNAME, DEPTNO) VALUES ('신길','IT',80);
INSERT INTO DEPT01 (DEPTNO, DNAME) VALUES (90, 'OPERATION'); -- 묵시적으로 NULL 추가
SELECT * FROM DEPT01;
-- 서브쿼리를 이용한 INSERT
INSERT INTO DEPT01 SELECT * FROM DEPT WHERE DEPTNO<40;
SELECT * FROM DEPT01;
  -- EX. BOOK(ID는 11, 책이름은 스포츠의 의학, 출판사는 한솔출판, 출판일 오늘, 가격은 90,000
INSERT INTO BOOK 
    VALUES (11, '스포츠의 의학', '한솔출판', SYSDATE, TO_NUMBER('90,000','99,999'));
SELECT * FROM BOOK;
  -- EX. BOOK(ID는 12, 책이름은 스포츠 과학, 출판사는 NULL, 출판일 오늘, 가격은 50,000
INSERT INTO BOOK (BOOKID, BOOKNAME, RDATE, PRICE)
    VALUES (12, '스포츠 과학', SYSDATE, 50000);
SELECT * FROM BOOK;
 -- 트랜젝션 명령어 : DML명령어들을 DB에 적용(COMMIT) + DML명령어들 취소(ROLLBACK)
COMMIT;
INSERT INTO BOOK (BOOKID, BOOKNAME, RDATE, PRICE)
    VALUES (13, '스포츠 과학', SYSDATE, 50000);
ROLLBACK;

-- ※ 연습문제 (pdf 1페이지) ※
DROP TABLE SAM01;
CREATE TABLE SAM01(
    EMPNO NUMBER(4) PRIMARY KEY,
    ENAME VARCHAR2(10),
    JOB   VARCHAR2(9),
    SAL   NUMBER(7,2)
);
SELECT * FROM SAM01;
INSERT INTO SAM01 (EMPNO, ENAME, JOB, SAL) 
    VALUES (1000,'APPLE','POLICE',10000);
INSERT INTO SAM01 VALUES (1010,'BANANA','NURSE',15000);
INSERT INTO SAM01 VALUES (1020,'ORANGE','DOCTOR',25000);
INSERT INTO SAM01 (EMPNO, ENAME, SAL) VALUES (1030,'VERY',25000);
INSERT INTO SAM01 VALUES (1040,'CAT',NULL, 2000);
INSERT INTO SAM01 
    SELECT EMPNO, ENAME, JOB, SAL FROM EMP WHERE DEPTNO=10;
SELECT * FROM SAM01;
COMMIT;









